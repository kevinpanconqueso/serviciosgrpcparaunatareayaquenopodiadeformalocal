// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: service.proto

package serviciosgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	EnviarService_SendDataWithFile_FullMethodName = "/serviciosgrpc.EnviarService/SendDataWithFile"
	EnviarService_GetData_FullMethodName          = "/serviciosgrpc.EnviarService/GetData"
)

// EnviarServiceClient is the client API for EnviarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnviarServiceClient interface {
	SendDataWithFile(ctx context.Context, in *DataWithFileRequest, opts ...grpc.CallOption) (*DataWithFileResponse, error)
	GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error)
}

type enviarServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnviarServiceClient(cc grpc.ClientConnInterface) EnviarServiceClient {
	return &enviarServiceClient{cc}
}

func (c *enviarServiceClient) SendDataWithFile(ctx context.Context, in *DataWithFileRequest, opts ...grpc.CallOption) (*DataWithFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataWithFileResponse)
	err := c.cc.Invoke(ctx, EnviarService_SendDataWithFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enviarServiceClient) GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDataResponse)
	err := c.cc.Invoke(ctx, EnviarService_GetData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnviarServiceServer is the server API for EnviarService service.
// All implementations must embed UnimplementedEnviarServiceServer
// for forward compatibility
type EnviarServiceServer interface {
	SendDataWithFile(context.Context, *DataWithFileRequest) (*DataWithFileResponse, error)
	GetData(context.Context, *GetDataRequest) (*GetDataResponse, error)
	mustEmbedUnimplementedEnviarServiceServer()
}

// UnimplementedEnviarServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEnviarServiceServer struct {
}

func (UnimplementedEnviarServiceServer) SendDataWithFile(context.Context, *DataWithFileRequest) (*DataWithFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDataWithFile not implemented")
}
func (UnimplementedEnviarServiceServer) GetData(context.Context, *GetDataRequest) (*GetDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedEnviarServiceServer) mustEmbedUnimplementedEnviarServiceServer() {}

// UnsafeEnviarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnviarServiceServer will
// result in compilation errors.
type UnsafeEnviarServiceServer interface {
	mustEmbedUnimplementedEnviarServiceServer()
}

func RegisterEnviarServiceServer(s grpc.ServiceRegistrar, srv EnviarServiceServer) {
	s.RegisterService(&EnviarService_ServiceDesc, srv)
}

func _EnviarService_SendDataWithFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataWithFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnviarServiceServer).SendDataWithFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnviarService_SendDataWithFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnviarServiceServer).SendDataWithFile(ctx, req.(*DataWithFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnviarService_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnviarServiceServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnviarService_GetData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnviarServiceServer).GetData(ctx, req.(*GetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnviarService_ServiceDesc is the grpc.ServiceDesc for EnviarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnviarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "serviciosgrpc.EnviarService",
	HandlerType: (*EnviarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendDataWithFile",
			Handler:    _EnviarService_SendDataWithFile_Handler,
		},
		{
			MethodName: "GetData",
			Handler:    _EnviarService_GetData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
